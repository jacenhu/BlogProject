{"remainingRequest":"/Users/hujincheng/Documents/Projects/myBlog/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/hujincheng/Documents/Projects/myBlog/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/hujincheng/Documents/Projects/myBlog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/hujincheng/Documents/Projects/myBlog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/hujincheng/Documents/Projects/myBlog/docs/program/dataStructure/dataStructure.md?vue&type=template&id=245a3a3a&","dependencies":[{"path":"/Users/hujincheng/Documents/Projects/myBlog/docs/program/dataStructure/dataStructure.md","mtime":1580308648256},{"path":"/Users/hujincheng/Documents/Projects/myBlog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hujincheng/Documents/Projects/myBlog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/hujincheng/Documents/Projects/myBlog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hujincheng/Documents/Projects/myBlog/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hujincheng/Documents/Projects/myBlog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"数据结构（c-language）\\\"><a href=\\\"#数据结构（c-language）\\\" class=\\\"header-anchor\\\">#</a> 数据结构（C language）</h1> <h2 id=\\\"chapter1-绪论\\\"><a href=\\\"#chapter1-绪论\\\" class=\\\"header-anchor\\\">#</a> Chapter1 绪论</h2> <h3 id=\\\"计算\\\"><a href=\\\"#计算\\\" class=\\\"header-anchor\\\">#</a> 计算</h3> <ul><li>computer science 实际上是computing science</li> <li>绳索计算机：工具以及可以重复的步骤</li> <li>尺规计算机</li> <li>算法：计算=信息处理</li></ul> <blockquote><p>借助某种工具，遵照一定规则，以明确而机械的形式进行。</p></blockquote> <ul><li>计算模型=计算机=信息处理工具</li> <li>算法：在特定计算模型下，解决特定问题的指令序列。</li></ul> <blockquote><p>算法需要正确性、确定性、可行性、有穷性</p></blockquote> <h3 id=\\\"计算模型\\\"><a href=\\\"#计算模型\\\" class=\\\"header-anchor\\\">#</a> 计算模型</h3> <h3 id=\\\"大o记号\\\"><a href=\\\"#大o记号\\\" class=\\\"header-anchor\\\">#</a> 大O记号</h3> <h3 id=\\\"算法分析\\\"><a href=\\\"#算法分析\\\" class=\\\"header-anchor\\\">#</a> 算法分析</h3> <h3 id=\\\"迭代与递归\\\"><a href=\\\"#迭代与递归\\\" class=\\\"header-anchor\\\">#</a> 迭代与递归</h3> <h3 id=\\\"动态规划\\\"><a href=\\\"#动态规划\\\" class=\\\"header-anchor\\\">#</a> 动态规划</h3> <h2 id=\\\"chapter2-向量\\\"><a href=\\\"#chapter2-向量\\\" class=\\\"header-anchor\\\">#</a> Chapter2 向量</h2> <h2 id=\\\"chapter3-列表\\\"><a href=\\\"#chapter3-列表\\\" class=\\\"header-anchor\\\">#</a> Chapter3 列表</h2> <h2 id=\\\"chapter4-栈与队列\\\"><a href=\\\"#chapter4-栈与队列\\\" class=\\\"header-anchor\\\">#</a> Chapter4 栈与队列</h2> <h2 id=\\\"chapter5-二叉树\\\"><a href=\\\"#chapter5-二叉树\\\" class=\\\"header-anchor\\\">#</a> Chapter5 二叉树</h2> <h3 id=\\\"先序遍历\\\"><a href=\\\"#先序遍历\\\" class=\\\"header-anchor\\\">#</a> 先序遍历</h3> <ul><li>半线性结构转变为线性结构</li></ul> <h3 id=\\\"中序遍历\\\"><a href=\\\"#中序遍历\\\" class=\\\"header-anchor\\\">#</a> 中序遍历</h3> <h3 id=\\\"层次遍历\\\"><a href=\\\"#层次遍历\\\" class=\\\"header-anchor\\\">#</a> 层次遍历</h3> <ul><li>按照深度次序，由高到低访问</li></ul> <h2 id=\\\"chapter6-图\\\"><a href=\\\"#chapter6-图\\\" class=\\\"header-anchor\\\">#</a> Chapter6 图</h2> <h3 id=\\\"概述\\\"><a href=\\\"#概述\\\" class=\\\"header-anchor\\\">#</a> 概述</h3> <ul><li>G=(V, E)</li></ul> <blockquote><p>V为点集，E为边集;\\nV-V 点与点之间的关系为邻接关系;\\nV-E 点与边之间的关系为关联关系;</p></blockquote> <h3 id=\\\"邻接矩阵\\\"><a href=\\\"#邻接矩阵\\\" class=\\\"header-anchor\\\">#</a> 邻接矩阵</h3> <h3 id=\\\"广度优先搜索\\\"><a href=\\\"#广度优先搜索\\\" class=\\\"header-anchor\\\">#</a> 广度优先搜索</h3> <h3 id=\\\"深度优先搜索\\\"><a href=\\\"#深度优先搜索\\\" class=\\\"header-anchor\\\">#</a> 深度优先搜索</h3> <ul><li>访问定点S，若S尚有未被访问的邻居，则任取其一u，递归执行DFS(u);否则，返回。</li></ul> <h2 id=\\\"chapter7-二叉搜索树bst\\\"><a href=\\\"#chapter7-二叉搜索树bst\\\" class=\\\"header-anchor\\\">#</a> Chapter7 二叉搜索树BST</h2> <h2 id=\\\"chapter8-高级搜索树\\\"><a href=\\\"#chapter8-高级搜索树\\\" class=\\\"header-anchor\\\">#</a> Chapter8 高级搜索树</h2> <h2 id=\\\"chpater9-词典\\\"><a href=\\\"#chpater9-词典\\\" class=\\\"header-anchor\\\">#</a> Chpater9 词典</h2> <h2 id=\\\"chapter10-优先级队列\\\"><a href=\\\"#chapter10-优先级队列\\\" class=\\\"header-anchor\\\">#</a> Chapter10 优先级队列</h2> <h3 id=\\\"需求与动机\\\"><a href=\\\"#需求与动机\\\" class=\\\"header-anchor\\\">#</a> 需求与动机</h3> <ul><li>场景：夜间门诊</li></ul> <h2 id=\\\"chapter11-串\\\"><a href=\\\"#chapter11-串\\\" class=\\\"header-anchor\\\">#</a> Chapter11 串</h2> <h3 id=\\\"adt\\\"><a href=\\\"#adt\\\" class=\\\"header-anchor\\\">#</a> ADT</h3> <ul><li>定义:由来自字母表的字符构成的长度有限的序列</li></ul> <h2 id=\\\"chapter12-排序\\\"><a href=\\\"#chapter12-排序\\\" class=\\\"header-anchor\\\">#</a> Chapter12 排序</h2> <h3 id=\\\"快速排序quiksort\\\"><a href=\\\"#快速排序quiksort\\\" class=\\\"header-anchor\\\">#</a> 快速排序quiksort</h3> <ul><li>分而治之</li></ul> <blockquote><p>将序列分为2个子序列\\n在子序列递归的排序知乎，原序列自然有序\\n平凡解：只剩单个元素时，本身就是解\\nquicksort的难点在于分</p></blockquote>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}